import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { api } from "../../utils/api";
import { type TBuildStep } from "../submit-build";

const Build: NextPage = () => {
  const router = useRouter();
  const { buildId } = useRouter().query as { buildId: string };

  const build = api.builds.getBuildById.useQuery(
    {
      buildId,
    },
    {
      enabled: false,
    }
  );

  const buildSteps = build.data?.buildSteps as TBuildStep[];

  const { mutate } = api.builds.incrementBuildOrderView.useMutation();

  useEffect(() => {
    mutate({ buildId });
  }, [mutate, buildId]);

  useEffect(() => {
    if (!router.isReady) return;
    build.refetch();
  }, [router.isReady, build]);

  const numberOfViews = build.data?.views;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container m-auto flex flex-col gap-8 bg-gray-800 pt-12">
        <div className="flex flex-row items-start gap-2">
          <h1 className="text-4xl font-semibold text-gray-900 dark:text-white">
            {build.data?.title}
          </h1>
        </div>
        <span className="text-md text-gray-900 dark:text-white">PageViews: {numberOfViews}</span>
        <pre className="text-md text-gray-900 dark:text-white">{build.data?.description}</pre>
        <div className="text-sm text-gray-900 dark:text-white">
          {buildSteps?.map((buildStep) => (
            <>
              <div>{buildStep.supply}</div>
              <div>{buildStep.unit}</div>
              {buildStep.note && <div>{buildStep.note}</div>}
            </>
          ))}
        </div>
      </main>
    </>
  );
};

export default Build;
