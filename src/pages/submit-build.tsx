import { type NextPage } from "next";
import Head from "next/head";
import { api } from "../utils/api";
import { useState } from "react";
import { useRouter } from "next/router";
import { buildTypes, capitalize } from "./matchups/[matchupName]";

export const matchUps = ["ZvT", "PvT", "TvT", "ZvP", "PvP", "TvP", "ZvZ", "PvZ", "TvZ"];

type races = "z" | "p" | "t";

type TStep = {
  name: string;
  supply: number;
};

const units: Record<races, TStep[]> = {
  z: [
    {
      name: "Drone",
      supply: 1,
    },
  ],
  p: [],
  t: [],
};

const structures: Record<races, TStep[]> = {
  z: [
    {
      name: "Spawning Pool",
      supply: -1,
    },
    {
      name: "Extractor",
      supply: -1,
    },
    {
      name: "Hatchery",
      supply: -1,
    },
  ],
  p: [],
  t: [],
};

const SubmitBuild: NextPage = () => {
  const createBuildOrderMutation = api.builds.createBuild.useMutation();

  const [matchUp, setMatchUp] = useState("zvt");
  const [build, setBuildOrder] = useState("");
  const [style, setStyle] = useState("cheese");
  const [author, setAuthor] = useState("");
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [supply, setSupply] = useState(12);
  const router = useRouter();

  const handleSubmitBuildOrder = async (e: React.FormEvent) => {
    e.preventDefault();
    await createBuildOrderMutation.mutateAsync({
      matchUp,
      build,
      style,
      author,
      title,
      description,
    });
    router.push("/");
  };

  function addStepToBuildOrder(stepName: TStep) {
    if (build === "") setBuildOrder(`${supply}` + " " + stepName.name);
    else setBuildOrder(build + "\n" + `${supply}` + " " + stepName.name);
    setSupply(supply + stepName.supply);
  }

  const race = matchUp[0];

  return (
    <>
      <Head>
        <title>Submit a Build</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-center gap-16 py-12 text-black dark:bg-gray-800 dark:text-white">
        <h1 className="text-4xl">Submit a Build Order</h1>
        <form className="flex w-11/12 flex-col gap-4" onSubmit={handleSubmitBuildOrder}>
          <div className="flex flex-row justify-start gap-8">
            <fieldset className="flex flex-col gap-2 self-center">
              <label
                className="text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="match-up-select"
              >
                Match Up
              </label>

              <select
                className="w-auto rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                onChange={(e) => setMatchUp(e.target.value)}
                required
                id="match-up-select"
              >
                {matchUps.map((matchUp) => (
                  <option key={matchUp} value={matchUp.toLowerCase()}>
                    {matchUp}
                  </option>
                ))}
              </select>
            </fieldset>
            <fieldset className="flex flex-col gap-2 self-center">
              <label className="text-sm font-medium text-gray-900 dark:text-white" htmlFor="style">
                Style
              </label>

              <select
                className="w-auto rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
                onChange={(e) => setStyle(e.target.value)}
                required
                id="style"
              >
                {buildTypes.map((buildType) => (
                  <option key={buildType} value={buildType}>
                    {capitalize(buildType)}
                  </option>
                ))}
              </select>
            </fieldset>
            <fieldset className="flex w-1/2 flex-col gap-2 self-center">
              <label htmlFor="author" className="text-sm font-medium text-gray-900 dark:text-white">
                Author
              </label>
              <input
                onChange={(e) => setAuthor(e.target.value)}
                type="text"
                id="author"
                className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              />
            </fieldset>
            <fieldset className="flex w-1/2 flex-col gap-2 self-center">
              <label htmlFor="title" className="text-sm font-medium text-gray-900 dark:text-white">
                Title
              </label>
              <input
                onChange={(e) => setTitle(e.target.value)}
                type="text"
                id="title"
                className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              />
            </fieldset>
          </div>
          <fieldset className="flex w-full flex-col gap-2 self-center">
            <label
              htmlFor="description"
              className="text-sm font-medium text-gray-900 dark:text-white"
            >
              Description
            </label>
            <textarea
              onChange={(e) => setDescription(e.target.value)}
              value={description}
              id="description"
              className="h-20 w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
            ></textarea>
          </fieldset>
          <fieldset className="flex w-full flex-row gap-4">
            <div className="w-1/2">
              <label
                htmlFor="build"
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
              >
                Your Build
              </label>
              <textarea
                required
                value={build}
                onChange={(e) => setBuildOrder(e.target.value)}
                id="build"
                className="h-96 w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 dark:focus:border-blue-500 dark:focus:ring-blue-500"
              />
            </div>
            <div className="flex w-1/2 gap-8">
              <div className="flex flex-col gap-4">
                <h2 className="text-2xl">Units</h2>
                {units[race as races].map((unit: TStep) => (
                  <button key={unit.name} type="button" onClick={() => addStepToBuildOrder(unit)}>
                    {unit.name}
                  </button>
                ))}
              </div>
              <div className="flex flex-col gap-4">
                <h2 className="text-2xl">Structures</h2>
                {structures[race as races].map((structure: TStep) => (
                  <button
                    key={structure.name}
                    type="button"
                    onClick={() => addStepToBuildOrder(structure)}
                  >
                    {structure.name}
                  </button>
                ))}
              </div>
            </div>
          </fieldset>
          <button className="w-1/2 self-center rounded-lg border border-blue-700 px-5 py-2.5 text-center text-sm font-medium text-blue-700 hover:bg-blue-800 hover:text-white focus:outline-none focus:ring-4 focus:ring-blue-300 dark:border-blue-500 dark:text-blue-500 dark:hover:bg-blue-600 dark:hover:text-white dark:focus:ring-blue-800">
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

export default SubmitBuild;
